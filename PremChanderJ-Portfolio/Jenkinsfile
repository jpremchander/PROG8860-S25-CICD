pipeline {
    agent any

    environment {
        NODE_VERSION = '24.2.0'
        APP_DIR = 'PremChanderJ-Portfolio'
        PORT = '3001'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'lab2', url: 'https://github.com/jpremchander/PROG8860-S25-CICD.git'
            }
        }

        stage('Install NodeJS') {
            steps {
                script {
                    def nodeHome = tool name: "NodeJS-${NODE_VERSION}", type: 'NodeJSInstallation'
//                    def nodeHome = tool name: "NodeJS-${NODE_VERSION}", type: 'NodeJSInstallation'
                    env.PATH = "${nodeHome}/bin:${env.PATH}"
                    sh 'node --version'
                    sh 'npm --version'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir("${APP_DIR}") {
                    sh 'npm install'
                }
            }
        }

        stage('Lint & Type Check') {
            steps {
                dir("${APP_DIR}") {
                    sh 'npm run lint'
                    // Adjust type-check if you have a script; otherwise skip or add your own command
                }
            }
        }

        stage('Test') {
            steps {
                dir("${APP_DIR}") {
                    sh 'npm run test -- --watchAll=false'
                }
            }
        }

        stage('Build Application') {
            steps {
                dir("${APP_DIR}") {
                    sh 'npm run build'
                }
            }
        }

        stage('Install Serve Globally') {
            steps {
                // Install 'serve' globally to serve the React production build
                sh 'npm install -g serve'
            }
        }

        stage('Stop Previous Instance (if running)') {
            steps {
                sh '''
                if lsof -Pi :${PORT} -sTCP:LISTEN -t >/dev/null ; then
                  kill $(lsof -t -i:${PORT})
                fi
                '''
            }
        }

        stage('Deploy Application') {
            steps {
                dir("${APP_DIR}") {
                    // Serve the 'build' folder on the given port in the background, logs to app.log
                    sh "nohup serve -s build -l ${PORT} > ../app.log 2>&1 &"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
